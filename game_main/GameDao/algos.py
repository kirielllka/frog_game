from .nonname import weapons
import random

class Algorithms:
    @classmethod
    def point_update(cls,point:int):
        while True:
            try:
                strg = int(input(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π –ø–æ–≤—ã—à–µ–Ω–∏—è (—É –≤–∞—Å –µ—Å—Ç—å {point}) '
                                 f'–∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Å–∏–ª—É: '))
                if 0 <= strg <= point:
                    point -= strg
                    break
                else:
                    print('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ', point)
            except ValueError:
                print('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.')

        while True:
            try:
                agl = int(input(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π –ø–æ–≤—ã—à–µ–Ω–∏—è (—É –≤–∞—Å –µ—Å—Ç—å {point}) '
                                f'–∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ª–æ–≤–∫–æ—Å—Ç—å: '))
                if 0 <= agl <= point:
                    point -= agl
                    break
                else:
                    print('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ', point)
            except ValueError:
                print('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.')

        while True:
            try:
                end = int(input(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π –ø–æ–≤—ã—à–µ–Ω–∏—è (—É –≤–∞—Å –µ—Å—Ç—å {point}) '
                                f'–∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: '))
                if 0 <= end <= point:
                    point -= end
                    break
                else:
                    print('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ', point)
            except ValueError:
                print('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.')
        return {
            'strg':strg,
            'agl':agl,
            'end':end
        }

    @classmethod
    def calculate_dodge_chance(cls, agility, player_level):
        base_chance = agility * 0.5
        dodge_chance = min(base_chance, 60)  # –®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 60%
        dodge_chance -= player_level * 0.1  # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —à–∞–Ω—Å–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞
        return dodge_chance

    def get_random_weapon(weapons):
        total_rare = sum(weapon['rare'] for weapon in weapons.values())
        random_num = random.randint(1, total_rare)

        cumulative_rare = 0
        for weapon_key, weapon_value in weapons.items():
            cumulative_rare += weapon_value['rare']
            if random_num <= cumulative_rare:
                return weapon_key

    @classmethod
    def print_weapon_stats(cls, weapon):
        print("‚öîÔ∏è  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ä—É–∂–∏—è  ‚öîÔ∏è")
        print("-" * 30)
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {weapon.name}")
        print(f"–¢–∏–ø: {weapon.type} üó°Ô∏è")
        print(f"–ê—Ç–∞–∫–∞: {weapon.attack} üí™")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω: {weapon.critic}% üí•")
        print("-" * 30)

    @classmethod
    def print_frog_stats(cls, frog_stats: dict):
        print("üê∏  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–π –∂–∞–±—ã  üê∏")
        print("-" * 30)
        print(f"–ò–º—è: {frog_stats['name']}")
        print(f"–£—Ä–æ–≤–µ–Ω—å: {frog_stats['lvl']}")
        print(f"–°–∏–ª–∞: {frog_stats['strengh']} üí™")
        print(f"–õ–æ–≤–∫–æ—Å—Ç—å: {frog_stats['agility']} üí®")
        print(f"–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {frog_stats['endurance']} üê¢")
        print(f'–û—Ä—É–∂–∏–µ: {frog_stats['weapon']}')
        print(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–Ω—Å: {frog_stats['critical']}% üí•')
        print(f"–ê—Ç–∞–∫–∞: {frog_stats['atack']} ‚öîÔ∏è")
        print(f"–ó–¥–æ—Ä–æ–≤—å–µ: {frog_stats['health']} ‚ù§Ô∏è")
        print(f"–£—Ä–æ–Ω: {frog_stats['damage']} üí¢")
        print(f"–®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è: {frog_stats['dodge']:.2f}% ü§∏‚Äç‚ôÇÔ∏è")
        print("-" * 30)