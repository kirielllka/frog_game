from math import trunc

import sqlalchemy

from .nonname import weapons

from database import session_maker

from models.Frog_models import Frog
from models.Items_models.Weapon_models import Weapons

from .ItemsDAO.WeaponsDAO import WeaponsDAO
from .BaseDAO import BaseDAO

from .algos import Algorithms

import random

from sqlalchemy import select, insert, update
{'wooden sword': 80,
 'test sword': 20,
 }

class FrogDAO(BaseDAO): #–º–æ–¥–µ–ª—å —Å–æ –≤—Å–µ–º–∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    model = Frog

    @classmethod
    def find_frog_by_name(cls, frog_name: str): #–ø–æ–∏—Å–∫ –∂–∞–±—ã –ø–æ –∏–º–µ–Ω–∏
            session = session_maker()
            query = select(Frog).where(Frog.name == frog_name) #–∏—â–µ–º –∂–∞–±—É –ø–æ –∏–º–µ–Ω–∏
            result = session.execute(query)#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:

                return result.fetchall()[0] #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            except IndexError:
                return None

    @classmethod
    def create_frog(cls):
        session = session_maker()
        frog_name = input('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–π –∂–∞–±—ã:')#
        if cls.find_frog_by_name(frog_name=frog_name):#
            print('–ñ–∞–±–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')#
            cls.create_frog()#
            return None
        atrs = Algorithms.point_update(10)#
        query = insert(Frog).values(name=frog_name, strengh=atrs['strg'],
                                    agility=atrs['agl'], endurance=atrs['end'])#
        session.execute(query)#
        session.commit()#

    @classmethod
    def create_frog_dict(cls, frog:Frog):
        if isinstance(frog,sqlalchemy.engine.row.Row):
            frog = frog[0]
        frog = BaseDAO.find_by_id(model_id=frog.id, model=Frog)[0]
        if frog:
            weapon = WeaponsDAO.find_active(frog_id=frog.id)[0]
            if weapon:
                weapon_name = weapon.name
            else:
                weapon_name = "No Weapon"
            return {
                'id': frog.id,
                'name': frog.name,
                'lvl': frog.lvl,
                'strengh': frog.strengh,
                'agility': frog.agility,
                'endurance': frog.endurance,
                'weapon': weapon_name,
                'critical': int(
                    (frog.agility * 0.5) + (frog.strengh * 0.3) - (frog.max_lvl * 0.1) * 1.5 + weapon.critic),
                'atack': frog.atack + weapon.attack,
                'health': frog.endurance * 5,
                'damage': frog.atack + frog.strengh + weapon.attack,
                'dodge': Algorithms.calculate_dodge_chance(agility=frog.agility, player_level=frog.max_lvl)
            }
        else:
            return None  # Handle cases where the frog isn't found

    @classmethod
    def update_atrs(cls, model_id):#
            session = session_maker()
            frog = cls.find_by_id(model=cls.model, model_id=model_id)[0]#
            if frog:
                result = Algorithms.point_update(point=3)#
                BaseDAO.update(model=Frog, model_id=model_id, data={'strengh':result['strg'] + frog.strengh,
                                                                    'agility':result['agl'] + frog.agility,
                                                                    'endurance':result['end'] + frog.endurance})
            else:#
                print(f'–ñ–∞–±–∞ —Å ID {model_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')#

    @classmethod
    def lvl_up(cls, frog_id):#
        session = session_maker()
        frog = cls.find_by_id(model=cls.model, model_id=frog_id)[0]#

        choise = input("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–ª—é—á –Ω—ã–Ω–µ—à–Ω–µ–π –∫–æ–º–Ω–∞—Ç—ã, –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â—É—é?\n"
                       "–£—á—Ç–∏—Ç–µ, —á—Ç–æ —Å –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–æ–π –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–∞–µ—Ç—Å—è, –∏ –≤–º–µ—Å—Ç–µ —Å —ç—Ç–∏–º –≤–∞—à–∏ –≤—Ä–∞–≥–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ.\n"
                       "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞, '–Ω–µ—Ç' –¥–ª—è –æ—Ç–∫–∞–∑–∞: ")#
        cls.update_atrs(model_id=frog_id)
        if choise.lower() == '–¥–∞':#
            lvl = frog.lvl + 1#
            max_lvl = frog.max_lvl + 1#
        else:#
            lvl = frog.lvl#
            max_lvl = frog.max_lvl + 1#

        BaseDAO.update(model=Frog, model_id=frog_id, data={'lvl':lvl,'max_lvl':max_lvl})

    @classmethod
    def fight(cls, enemy: dict = None, frog: dict = None):
        if frog is None:
            return None
        if enemy is None:
            if frog['lvl'] < 10:
                probability = 1 / frog['lvl']
            else:
                probability = 3 // frog['lvl']

            super = random.random() < 1-probability
            frog = cls.create_frog_dict(cls.find_frog_by_name(frog_name=frog['name']))
            enemy_health = random.randint(round(frog['lvl'] * 7 * 0.8), round(frog['lvl'] * 7 * 2))
            enemy = {
                'health': enemy_health,
                'damage': random.randint(round(frog['lvl'] * 3 * 0.8), round(frog['lvl'] * 3 * 1.2)),
                'super': super,
                'max_health': enemy_health
            }

        critical_probability = frog['critical'] / 100

        dodge_probability = frog['dodge'] / 100

        if random.random() < critical_probability:
            damage = random.randint(trunc(frog['damage'] * 0.8), trunc(frog['damage'] * 1.2)) * 1.5
            dmg_text = f'–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {damage}‚öîÔ∏è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞ üí•'
        else:
            damage = random.randint(trunc(frog['damage'] * 0.8), trunc(frog['damage'] * 1.2)) * 1.5
            dmg_text = f'–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {damage}‚öîÔ∏è —É—Ä–æ–Ω–∞'

        damage_enemy = random.randint(trunc(enemy['damage'] * 0.8), trunc(enemy['damage'] * 1.2))

        if enemy['health'] <= 0:
            if enemy['super']:
                print("üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! üèÜ")
                cls.lvl_up(frog_id=frog['id'])
                frog.clear()
                enemy.clear()
                return None
            else:
                print("üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! üéâ")
                return None

        if frog['health'] <= 0:
            print("üíÄ –í—ã –ø–∞–ª–∏ –æ—Ç —Ä—É–∫ –≤—Ä–∞–≥–∞! üíÄ")
            frog.clear()
            enemy.clear()
        else:
            print(f"–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {frog['health']} –∏–∑ {frog['lvl'] * 5} üíö")
            print(f"–í–∞—à —É—Ä–æ–Ω: {frog['damage']} ‚öîÔ∏è")
            print(f"–í–∞—à —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è: {frog['dodge']}% üí®\n")
            print(f"–ó–¥–æ—Ä–æ–≤—å–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: {enemy['health']} –∏–∑ {enemy['max_health']} üíî")
            print(f"–£—Ä–æ–Ω –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: {enemy['damage']} üó°Ô∏è")

            choise = int(input("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n1 - –ê—Ç–∞–∫–æ–≤–∞—Ç—å ‚öîÔ∏è\n2 - –°–±–µ–∂–∞—Ç—å üèÉ‚Äç‚ôÇÔ∏è\n"))

            match choise:
                case 1:
                    if not random.random() < dodge_probability:
                        frog['health'] -= damage_enemy
                        en_dmg_txt = f'–í–∞—à –≤—Ä–∞–≥ –Ω–∞–Ω–µ—Å {damage_enemy}‚öîÔ∏è —É—Ä–æ–Ω–∞ '
                    else:
                        en_dmg_txt = '–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è'

                    enemy['health'] -= damage

                    print(dmg_text)
                    print(en_dmg_txt)
                    cls.fight(enemy=enemy, frog=frog)
                case 2:
                    print("üèÉ‚Äç‚ôÇÔ∏è –í—ã —Å–±–µ–∂–∞–ª–∏! üèÉ‚Äç‚ôÇÔ∏è")

    @classmethod
    def weapon_activate_list(cls, frog_id):
        weapons = BaseDAO.find_all(Weapons)
        for weapon_index in range(len(weapons)):
            print(f'{weapon_index+1}. {weapons[weapon_index].name}')
        choise = int(input('–í—ã–±–µ—Ä–µ—Ç–µ –æ—Ä—É–∂–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã:'))
        if choise == 0:
            return None
        else:
            weapon = weapons[choise-1]
            Algorithms.print_weapon_stats(weapon)
            choise = input(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {weapon.name}:')
            if choise.lower() == '–¥–∞':
                WeaponsDAO.switch_active(weapon_id=weapon.id)
            if choise.lower() == '–Ω–µ—Ç':
                cls.weapon_activate_list(frog_id=frog_id)


    @classmethod
    def find_chest_weapon(cls, frog_dict):

        empty_chest_chance = 0.2

        if random.random() < empty_chest_chance:
            print("üòî –í—ã –Ω–∞—à–ª–∏ —Å—É–Ω–¥—É–∫, –Ω–æ –æ–Ω –ø—É—Å—Ç...")
            return

        print("‚ú® –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ —Å—É–Ω–¥—É–∫! ‚ú®")
        print("üéÅ –í—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—å? üéÅ")
        print("1 - –û—Ç–∫—Ä—ã—Ç—å üîë")
        print("2 - –û—Å—Ç–∞–≤–∏—Ç—å üö™")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")

        if choice == "1":
            random_weapon_name = Algorithms.get_random_weapon(weapons)
            weapon_data = weapons[random_weapon_name]

            new_weapon = Weapons(
                name=random_weapon_name,
                type=weapon_data['type'],
                attack=weapon_data['attack'],
                critic=weapon_data['critic'],
                active=False,
                frog_id=frog_dict['id']
            )

            session = session_maker()
            session.add(new_weapon)
            session.commit()
            session.close()

            print(f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {random_weapon_name}! üéâ")
        elif choice == "2":
            print("üö™ –í—ã —Ä–µ—à–∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—É–Ω–¥—É–∫ –Ω–∞ –ø–æ—Ç–æ–º. üö™")
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. ‚ùå")




    @classmethod
    def delete_item_from_inv(cls, frog_id):
        weapons = BaseDAO.find_all(Weapons)
        for weapon_index in range(len(weapons)):
            print(f'{weapon_index+1}. {weapons[weapon_index].name}')
        choise = int(input('–í—ã–±–µ—Ä–µ—Ç–µ –≤–µ—â—å –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–æ—Å–∏—Ç—å, –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã:'))
        if choise == 0:
            return None
        else:
            weapon = weapons[choise-1]
            Algorithms.print_weapon_stats(weapon)
            choise = input(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–æ—Å–∏—Ç—å {weapon.name}:')
            if choise.lower() == '–¥–∞':
                BaseDAO.delete(Weapons,model_id=weapon.id)
            if choise.lower() == '–Ω–µ—Ç':
                cls.delete_item_from_inv()







