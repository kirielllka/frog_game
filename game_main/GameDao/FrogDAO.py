from math import trunc

from database import session_maker as session

from models.Frog_models import Frog

from .BaseDAO import BaseDAO

from .algos import Algorithms

import random

from sqlalchemy import select, insert, update


class FrogDAO(BaseDAO): #–º–æ–¥–µ–ª—å —Å–æ –≤—Å–µ–º–∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    model = Frog

    @classmethod
    def find_frog_by_name(cls, frog_name: str): #–ø–æ–∏—Å–∫ –∂–∞–±—ã –ø–æ –∏–º–µ–Ω–∏

            query = select(Frog).where(Frog.name == frog_name) #–∏—â–µ–º –∂–∞–±—É –ø–æ –∏–º–µ–Ω–∏
            result = session().execute(query)#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:

                return result.fetchall()[0] #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            except IndexError:
                return None
    @classmethod
    def create_frog(cls): #
        frog_name = input('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–π –∂–∞–±—ã:')#
        if cls.find_frog_by_name(frog_name=frog_name):#
            print('–ñ–∞–±–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')#
            cls.create_frog()#
            return
        atrs = Algorithms.point_update(10)#
        query = insert(Frog).values(name=frog_name, strengh=atrs['strg'],
                                    agility=atrs['agl'], endurance=atrs['end'])#
        session().execute(query)#
        session().commit()#

    @classmethod
    def create_frog_dict(cls, frog: Frog):#
        frog = frog[0]
        return {
            'id': frog.id,
            'name': frog.name,
            'lvl': frog.lvl,
            'strengh': frog.strengh,
            'agility': frog.agility,
            'endurance': frog.endurance,
            'atack': frog.attack,
            'health': frog.endurance * 5,
            'damage': frog.attack + frog.strengh,
            'dodge': cls.calculate_dodge_chance(agility=frog.agility,player_level=frog.max_lvl)
        }#

    @classmethod
    def update_atrs(cls, model_id):#
            frog = cls.find_by_id(model=cls.model, model_id=model_id)#
            if frog:#
                result = Algorithms.point_update(point=3)#
                query = (update(Frog).values(strengh=result['strg'] + frog.strengh,
                                            agility=result['agl'] + frog.agility,
                                            endurance=result['end'] + frog.endurance)
                         .where(Frog.id == frog.id))#
                session.execute(query)#
                session.commit()#
            else:#
                print(f'–ñ–∞–±–∞ —Å ID {model_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')#

    @classmethod
    def lvl_up(cls, frog_id):#
        frog = cls.find_by_id(model=cls.model, model_id=frog_id)[0]#

        choise = input("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–ª—é—á –Ω—ã–Ω–µ—à–Ω–µ–π –∫–æ–º–Ω–∞—Ç—ã, –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â—É—é?\n"
                       "–£—á—Ç–∏—Ç–µ, —á—Ç–æ —Å –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–æ–π –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–∞–µ—Ç—Å—è, –∏ –≤–º–µ—Å—Ç–µ —Å —ç—Ç–∏–º –≤–∞—à–∏ –≤—Ä–∞–≥–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ.\n"
                       "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞, '–Ω–µ—Ç' –¥–ª—è –æ—Ç–∫–∞–∑–∞: ")#
        cls.update_atrs(model_id=frog_id)
        if choise.lower() == '–¥–∞':#
            lvl = frog.lvl + 1#
            max_lvl = frog.max_lvl + 1#
        else:#
            lvl = frog.lvl#
            max_lvl = frog.max_lvl + 1#

        query = update(Frog).where(Frog.id == frog_id).values(lvl=lvl, max_lvl=max_lvl)#
        session().execute(query)#
        session().commit()#
    @classmethod#
    def fight(cls, enemy: dict = None, frog: dict = None):#
        print(f"üê∏ {frog}")#

        if frog is None:#
            return None
        if enemy is None:
            if frog['lvl'] < 10:
                probability = 1 / frog['lvl']
            else:
                probability = 3 // frog['lvl']
            super = random.choices([False, True], weights=[1 - probability, probability])[0]
            print(probability)
            frog = cls.create_frog_dict(cls.find_frog_by_name(frog_name=frog['name']))
            health = random.randint(round(frog['lvl'] * 5*0.8),round(frog['lvl']* 5 * 2))
            enemy = {
                'health': health,
                'damage': random.randint(round(frog['lvl'] * 3 * 0.8),round(frog['lvl'] *3 *1.2)),
                'super': super,
                'max_health':health
            }
        damage = random.randint(trunc(frog['damage']*0.8),trunc(frog['damage']*1.2))
        damage_enemy = random.randint(trunc(enemy['damage']*0.8),trunc(enemy['damage']*1.2))

        if enemy['health'] <= 0:
            if enemy['super']:
                print("üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! üèÜ")
                cls.lvl_up(frog_id=frog['id'])
                frog.clear()
                enemy.clear()
                return None
            else:
                print("üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! üéâ")
                return None

        if frog['health'] <= 0:
            print("üíÄ –í—ã –ø–∞–ª–∏ –æ—Ç —Ä—É–∫ –≤—Ä–∞–≥–∞! üíÄ")
            frog.clear()
            enemy.clear()
        else:
            print(f"–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {frog['health']} –∏–∑ {frog['lvl'] * 5} üíö")
            print(f"–í–∞—à —É—Ä–æ–Ω: {frog['damage']} ‚öîÔ∏è")
            print(f"–í–∞—à —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è: {frog['dodge']} üí®\n")
            print(f"–ó–¥–æ—Ä–æ–≤—å–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: {enemy['health']} –∏–∑ {enemy['max_health']} üíî")
            print(f"–£—Ä–æ–Ω –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: {enemy['damage']} üó°Ô∏è")

            choise = int(input("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n1 - –ê—Ç–∞–∫–æ–≤–∞—Ç—å ‚öîÔ∏è\n2 - –°–±–µ–∂–∞—Ç—å üèÉ‚Äç‚ôÇÔ∏è\n"))

            match choise:
                case 1:
                    if not random.choices([True,False], weights=(frog['dodge'],100-frog['dodge'])):
                        frog['health'] -= damage_enemy
                        en_dmg_txt = f'–í–∞—à –≤—Ä–∞–≥ –Ω–∞–Ω–µ—Å {damage_enemy}‚öîÔ∏è —É—Ä–æ–Ω–∞'
                    else:
                        en_dmg_txt = '–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è'
                    enemy['health'] -= damage
                    print(f'–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {damage}‚öîÔ∏è —É—Ä–æ–Ω–∞ ')
                    print(en_dmg_txt)
                    cls.fight(enemy=enemy, frog=frog)
                case 2:
                    print("üèÉ‚Äç‚ôÇÔ∏è –í—ã —Å–±–µ–∂–∞–ª–∏! üèÉ‚Äç‚ôÇÔ∏è")

    @classmethod
    def calculate_dodge_chance(cls,agility, player_level):
        base_chance = agility * 0.5
        dodge_chance = min(base_chance, 60)  # –®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 60%
        dodge_chance -= player_level * 0.1  # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —à–∞–Ω—Å–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞
        return dodge_chance

    @classmethod
    def print_frog_stats(cls, frog_stats: dict):
        print("üê∏  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–π –∂–∞–±—ã  üê∏")
        print("-" * 30)
        print(f"–ò–º—è: {frog_stats['name']}")
        print(f"–£—Ä–æ–≤–µ–Ω—å: {frog_stats['lvl']}")
        print(f"–°–∏–ª–∞: {frog_stats['strengh']} üí™")
        print(f"–õ–æ–≤–∫–æ—Å—Ç—å: {frog_stats['agility']} üí®")
        print(f"–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {frog_stats['endurance']} üê¢")
        print(f"–ê—Ç–∞–∫–∞: {frog_stats['atack']} ‚öîÔ∏è")
        print(f"–ó–¥–æ—Ä–æ–≤—å–µ: {frog_stats['health']} ‚ù§Ô∏è")
        print(f"–£—Ä–æ–Ω: {frog_stats['damage']} üí•")
        print(f"–®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è: {frog_stats['dodge']:.2f}% ü§∏‚Äç‚ôÇÔ∏è")
        print("-" * 30)




